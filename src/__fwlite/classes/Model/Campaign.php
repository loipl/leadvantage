<?php

class Model_Campaign extends CrudModelCaching {

    const DELIVERY_TYPE_LIVE        = 'Live';
    const DELIVERY_TYPE_QUEUED      = 'Queued';
    const DELIVERY_TYPE_LIVE_KEY    = 1;
    const DELIVERY_TYPE_QUEUED_KEY  = 2;
    const RESPONSE_TYPE_REDIRECT    = 'Redirect';
    const RESPONSE_TYPE_API         = 'API';
    const RESPONSE_TYPE_REDIRECT_KEY= 1;
    const RESPONSE_TYPE_API_KEY     = 2;
    
    const CAMPAIGN_TYPE_DEFAULT         = 1;
    const CAMPAIGN_TYPE_MASTER          = 2;
    const CAMPAIGN_TYPE_PING_POST       = 3;
    const CAMPAIGN_TYPE_PING_AND_POST   = 4;
    const CAMPAIGN_TYPE_NOT_ACTIVE      = 0;
    
    const DISTRIBUTION_PRIORITIZED  = 0;
    const DISTRIBUTION_ROUND_ROBIN  = 1;
    const DISTRIBUTION_AUCTION      = 2;
    
    const BID_RESPONSE_PERCENT      = 1;
    const BID_RESPONSE_FLAT_RATE    = 2;
    const BID_RESPONSE_FIXED        = 3;
    
    public static $deliveryTypes = array(
        self::DELIVERY_TYPE_LIVE_KEY        => self::DELIVERY_TYPE_LIVE,
        self::DELIVERY_TYPE_QUEUED_KEY      => self::DELIVERY_TYPE_QUEUED
    );
    
    public static $responseTypes = array(
        self::RESPONSE_TYPE_REDIRECT_KEY    => self::RESPONSE_TYPE_REDIRECT,
        self::RESPONSE_TYPE_API_KEY         => self::RESPONSE_TYPE_API
    );
    
    public static $campaignTypes = array(
        self::CAMPAIGN_TYPE_DEFAULT         => 'Default',
        self::CAMPAIGN_TYPE_MASTER          => 'Master',
        self::CAMPAIGN_TYPE_PING_POST       => 'Ping + Post',
        self::CAMPAIGN_TYPE_PING_AND_POST   => 'Ping / Post',
        self::CAMPAIGN_TYPE_NOT_ACTIVE      => 'Not Active'
    );
    
    public static $distributionTypes = array(
        self::DISTRIBUTION_PRIORITIZED      => 'Prioritized',
        self::DISTRIBUTION_ROUND_ROBIN      => 'Round-robin',
        self::DISTRIBUTION_AUCTION          => 'Auction'
    );
    
    public static $bidResponseType = array(
        self::BID_RESPONSE_PERCENT      => 'Percent',
        self::BID_RESPONSE_FLAT_RATE    => 'Flat rate',
        self::BID_RESPONSE_FIXED        => 'Fixed'
    );
    
    protected $t_campaigns;

    protected $t_partners;

    protected $t_campaign_delivery;

    protected $t_campaign_fields;

    protected $t_campaign_oob_ranges;

    protected $t_field_types;

    protected $t_log_incoming;

    protected $t_sh_delivery;

    protected $t_sh_incoming;

    protected $t_summary_acceptance;

    protected $t_template_campaigns;

    protected $t_validation_log;


    public function __construct(DB $db = null) {
        $db = $db ? $db : DB::$db;
        $this->setTablePrefix($db->getTablePrefix());
        parent::__construct($db, $this->t_campaigns);

        $this->timestampForInsert = array('created_at', 'oob_cutoff_time');
        $this->zeroOneFields      = array('is_active', 'is_master',  'should_repost', 'is_oob_capped', 'capalp', 'stdw', 'append_succ_url');
    }
    //--------------------------------------------------------------------------


    public function markAsDeleted($id) {
        $sql = "UPDATE `$this->tableName` SET `name` = CONCAT('Deleted #', ?, ' - ', `name`), `user_id` = NULL, `is_active` = '0' WHERE `id` = ?";
        $this->db->query($sql, array($id . '', (int)$id));

        $this->deleteCampaignFromAllRelatedSmallTables($id);
    }
    //--------------------------------------------------------------------------


    /**
     * @desc When marking campaign as deleted, also delete its data from related small
     * tables - ones not generated by traffic - visible in the UI
     */
    public function deleteCampaignFromAllRelatedSmallTables($campaignId) {

        $dependantTables = array(
            $this->t_campaign_delivery,
            $this->t_sh_delivery,
            $this->t_sh_incoming,
            $this->t_summary_acceptance,
            $this->t_template_campaigns,
            $this->t_validation_log,
        );

        foreach ($dependantTables as $tableName) {
            $sql = "DELETE FROM `$tableName` WHERE `campaign_id` = ?";
            $this->db->query($sql, array((int)$campaignId));
        }
    }
    //--------------------------------------------------------------------------


    public function updateDiff($pk, array $data, array $oldData, $ignore = false) {
        $pk = (int)$pk;
        $success = parent::updateDiff($pk, $data, $oldData, $ignore);

        if (isset($data['is_master']) && (int) $data['is_master'] === 1) {
            $this->disableRepostForMasterCampaign($oldData['id']);
        }
        
        if ($success) {
            if (isset($data['delivery_type'], $oldData['delivery_type']) && ($data['delivery_type'] != $oldData['delivery_type'])) {
                $this->maintainOobRangesTableAfterChange($pk, $data);
            }
        }
        return $success;
    }
    //--------------------------------------------------------------------------
    
    
    private function disableRepostForMasterCampaign($campaignId) {
        $sql = "UPDATE `$this->tableName` 
                SET `should_repost` = '0',
                    `repost_hours` = '0',
                    `repost_max` = '0'
                WHERE `id` = ?";

        return $this->db->query($sql, array((int)$campaignId));
    }
    //--------------------------------------------------------------------------
    
    
    private function maintainOobRangesTableAfterChange($pk, array $data) {
        $sql = "
        SELECT * FROM `$this->t_campaign_oob_ranges` WHERE `start_inc_id` =
        (SELECT MAX(`start_inc_id`) FROM `$this->t_campaign_oob_ranges` WHERE `campaign_id` = ?)
        AND `campaign_id` = ?";

        $lastRow = $this->db->getTopArray($sql, array($pk, $pk));
        $isOOB = (intval($data['delivery_type']) === Model_Campaign::DELIVERY_TYPE_QUEUED_KEY) ? '1' : '0';
        
        if ($lastRow) {
            if  ($lastRow['is_oob'] == $isOOB) {
                return;
            }

            $max = $this->db->getTopLeftInt("SELECT MAX(`id`) FROM `$this->t_log_incoming` WHERE `campaign_id` = ?", array($pk));
            if ($lastRow['start_inc_id'] == $max + 1) {
                $this->db->query("UPDATE `$this->t_campaign_oob_ranges` SET `is_oob` = ?  WHERE `campaign_id` = ? AND `start_inc_id` = ?",
                    array($isOOB ? '1' : '0', $pk, $max + 1));
                return;
            }

            $this->db->query("UPDATE `$this->t_campaign_oob_ranges` SET `end_inc_id` = ?  WHERE `campaign_id` = ? AND `start_inc_id` = ?",
                array($max, $pk, (int)$lastRow['start_inc_id']));
            $this->db->query("INSERT INTO `$this->t_campaign_oob_ranges` (`campaign_id`, `start_inc_id`, `end_inc_id`, `is_oob`) VALUES (?, ?, ?, ?)",
                array($pk, $max + 1, NULL, $isOOB ? '1' : '0'));

        } else {
            $min = $this->db->getTopLeftInt("SELECT MIN(`id`) FROM `$this->t_log_incoming` WHERE `campaign_id` = ?", array($pk));
            $this->db->query("INSERT INTO `$this->t_campaign_oob_ranges` (`campaign_id`, `start_inc_id`, `end_inc_id`, `is_oob`) VALUES (?, ?, ?, ?)",
                array($pk, max(1, $min), NULL, $isOOB ? '1' : '0'));
        }
    }
    //--------------------------------------------------------------------------


    /**
     * @desc Returns position where given id is found when rows are sorted by name.
     * Used to redirect user to correct page for the campaign he just edited
     */
    public function indexOfIdSortedByName($userId, $id) {
        $arr = $this->db->getArray1v("SELECT `id` FROM `$this->tableName` WHERE `user_id` = ? ORDER BY `name`", array((int)$userId));
        return array_search((int)$id, $arr);
    }
    //--------------------------------------------------------------------------


    public function listOOBRanges(array $campaignIDs) {
        if (!$campaignIDs) {
            return array();
        }

        $sql = "SELECT * FROM `$this->t_campaign_oob_ranges` WHERE `campaign_id` IN (" . self::implodeInts($campaignIDs) . ") ORDER BY `campaign_id`, `start_inc_id`";
        $output = array();
        foreach ($this->db->getArray($sql, array(), MYSQL_ASSOC) as $row) {
            if (!isset($output[$row['campaign_id']])) {
                $output[$row['campaign_id']] = array();
            }
            $output[$row['campaign_id']][] = $row;
        }
        return $output;
    }
    //--------------------------------------------------------------------------


    public function listOOBStatesAssoc($campaignIDs) {
        if (!$campaignIDs) {
            return array();
        }

        $sql = "SELECT `id`, `delivery_type` FROM `$this->tableName` WHERE `id` IN (" . self::implodeInts($campaignIDs) . ") ORDER BY 1";
        return $this->db->getArrayAssoc($sql);
    }
    //--------------------------------------------------------------------------


    /**
     * @Cached
     */
    public function listDeliverySettings($campaignId) {
        $sql = "SELECT `partner_id`, `order_nr`, `always_send` FROM `$this->t_campaign_delivery` WHERE `campaign_id` = ? ORDER BY `order_nr`";
        return $this->db->getArray($sql, array((int)$campaignId));
    }
    //--------------------------------------------------------------------------


    public function listCampaignsWithNoDeliverySettings($userId) {
        $sql = "SELECT `c`.`id`, `c`.`name`, COUNT(`d`.`partner_id`) AS `cnt` FROM `$this->tableName` AS `c`
        LEFT JOIN `$this->t_campaign_delivery` AS `d` ON `c`.`id` = `d`.`campaign_id`
        WHERE `c`.`user_id` = ?
        GROUP BY `c`.`id`
        HAVING
        `cnt` = 0";

        $arr = $this->db->getArray($sql, array((int)$userId));
        $output = array();
        foreach ($arr as $row) {
            $output[$row['id']] = $row['name'];
        }
        return $output;
    }
    //--------------------------------------------------------------------------


    public function insertDeliverySettings($campaignId, array $deliveryData) {
        $this->startTransaction();

        $campaignId = (int)$campaignId;
        $this->db->query("DELETE FROM `$this->t_campaign_delivery` WHERE `campaign_id` = ?", array((int)$campaignId));

        if ($deliveryData) {
            $sql = "INSERT INTO `$this->t_campaign_delivery` (`campaign_id`, `partner_id`, `order_nr`, `always_send`) VALUES\n";
            $sql .= implode(",\n", array_fill(0, sizeof($deliveryData), '(?, ?, ?, ?)'));
            foreach ($deliveryData as $id => $row) {
                $params[] = $campaignId;
                $params[] = (int)$row['partner_id'];
                $params[] = $id + 1;
                $params[] = empty($row['always_send']) ? '0' : '1';
            }
            $result = $this->db->query($sql, $params);
        } else {
            $result = false;
        }

        $this->commit();
        return $result;
    }
    //--------------------------------------------------------------------------


    public function getCampaignHashCode($userId, $campaignId) {
        return (int)$campaignId . 'e' . md5('troglodyte' . $userId . $campaignId);
    }
    //--------------------------------------------------------------------------


    /**
     * @Cached
     */
    public function getCampaignFromHash($hash) {
        $parts = explode('e', $hash, 2);
        if (sizeof($parts) == 2) {
            $row = $this->get((int)$parts[0]);
            if ($row) {
                if ($hash == $this->getCampaignHashCode($row['user_id'], (int)$parts[0])) {
                    return $row;
                }
            }
        }

        return array();
    }
    //--------------------------------------------------------------------------


    /**
     * @Cached
     */
    public function getCampaignNamesAssocForPartnerId($partnerId) {
        $sql = "
        SELECT `c`.`id`, `c`.`name` FROM
        `$this->tableName` AS `c`, `$this->t_campaign_delivery` AS `cd`
        WHERE
        `cd`.`campaign_id` = `c`.`id` AND
        `cd`.`partner_id`  = ?
        ORDER BY
        1, 2";
        return $this->db->getArrayAssoc($sql, array((int)$partnerId));
    }
    //--------------------------------------------------------------------------


    /**
     * @Cached
     */
    public function getCampaignFieldsForPartnerId($partnerId) {
        $partnerId = (int)$partnerId;
        $result = array();
        $sql = "
        SELECT
        `id`                       AS `campaign_id`,
        `email_field_name`         AS `name`,
        `email_field_description`  AS `desc`,
        'email_field_mandatory'    AS `mandatory`
        FROM
        `$this->t_campaign_delivery` AS `cd`,
        `$this->tableName` AS `c`
        WHERE
        `cd`.`campaign_id` = `c`.`id` AND
        `cd`.`partner_id`  = $partnerId";
        foreach ($this->db->getArray($sql) as $row) {
            $result[(int)$row['campaign_id']][] = array(
                    'name'      => $row['name'],
                    'desc'      => $row['desc'],
                    'mandatory' => $row['mandatory'],
                    'ft'        => Model_CampaignField::FIELD_TYPE_EMAIL
            );
        }

        if (!$result) {
            return array();
        }

        $sql = "SELECT `campaign_id`, `name`, `description`, `field_type`, `is_mandatory`
        FROM `$this->t_campaign_fields` WHERE `campaign_id` IN (" . self::implodeInts(array_keys($result)) . ')
        ORDER BY 1, 2';

        foreach ($this->db->getArray($sql) as $row) {
            $result[(int)$row['campaign_id']][] = array(
                    'name'      => $row['name'],
                    'desc'      => $row['description'],
                    'mandatory' => $row['is_mandatory'],
                    'ft'        => $row['field_type']
            );
        }

        return $result;
    }
    //--------------------------------------------------------------------------


    /**
     * @Cached
     */
    public function getFTypesAssocUsedByUser($userId) {
        $sql = "SELECT DISTINCT `cf`.`field_type`, `ft`.`name` FROM
        `$this->t_campaign_fields` AS `cf`, `$this->t_campaigns` AS `c`, `$this->t_field_types` AS `ft` WHERE
        `c`.`id` = `cf`.`campaign_id` AND
        `cf`.`field_type` = `ft`.`id` AND
        `c`.`user_id` = ?";

        $arr = $this->db->getArrayAssoc($sql, array((int)$userId));

        $arr[Model_CampaignField::FIELD_TYPE_EMAIL] = 'Email';
        asort($arr);
        return $arr;
    }
    //--------------------------------------------------------------------------


    public function addCampaignFieldForChildIpField($campaignId) {
        $sql = "
        INSERT IGNORE INTO `$this->t_campaign_fields` (id, campaign_id, name, description, field_type, is_mandatory)
        VALUES (
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
        );";

        $this->db->query($sql, array(NULL, (int)$campaignId, 'lw_child_ip_pass', 'Master Campaign IP Pass-Thru', '24', '0'));
    }
    //--------------------------------------------------------------------------


    public function getWrapperPartnerIdsAssignedToMasters($userId) {
        $masterCampaigns = $this->getMasterCampaignList($userId);
        
        // init variable (resolve ticket 581)
        $assignedWrapperIds = array();
        
        foreach ($masterCampaigns AS $master) {
            $childCampaigns = $this->getChildWrapperIdsFromCampaignId($master);

            foreach ($childCampaigns AS $child) {
                $assignedWrapperIds[] = $child;
            }
        }

        if ( ! empty($assignedWrapperIds)) {
            return $assignedWrapperIds;
        } else {
            return false;
        }
    }
    //--------------------------------------------------------------------------


    public function getChildWrapperIdsFromCampaignId($campaignId) {
        $sql = "SELECT `partner_id` FROM `$this->t_campaign_delivery` WHERE
        `campaign_id` = ?";

        $result = $this->db->getArray1v($sql, array((int)$campaignId));

        return $result;
    }
    //--------------------------------------------------------------------------


    public function getMasterCampaignList($userId) {
        $sql = "SELECT `id` FROM `$this->t_campaigns` WHERE
        `is_master` = ? AND
        `user_id`   = ?";

        $result = $this->db->getArray1v($sql, array('1', (int)$userId));

        return $result;
    }
    //--------------------------------------------------------------------------


    public function copyCampaign($id, $newName, $copyFields, $copyDelivery, $copyRules, $overrideUserId = false) {
        if (trim($newName) == '') {
            throw new EExplainableError("Name cannot be empty");
        }
        $row = $this->createCampaignRowForCopying($id, $newName, $copyFields, $overrideUserId);

        $newId = $row ? $this->insert($row) : false;
        if ($newId) {
            if ($copyFields) {
                $mcf = SingletonRegistry::getModelCampaignField();
                foreach ($mcf->listAllForCampaign($id) as $row) {
                    $row['campaign_id'] = $newId;
                    unset($row['id']);
                    Lib::removeIntKeys($row);

                    $mcf->insert($row);
                }
            }

            if ($copyRules) {
                $mcr = SingletonRegistry::getModelCampaignFilter();
                foreach ($mcr->listAllForCampaign($id) as $row) {
                    $row['campaign_id'] = $newId;
                    unset($row['id']);
                    Lib::removeIntKeys($row);

                    $mcr->insert($row);
                }
            }
            if ($copyDelivery) {
                $settings = $this->listDeliverySettings($id);
                $this->insertDeliverySettings($newId, $settings);
            }
        } else {
            throw new EExplainableError('Cannot copy campaign');
        }
    }
    //--------------------------------------------------------------------------


    private function createCampaignRowForCopying($id, $newName, $copyFields, $overrideUserId) {

        $row = $this->get((int)$id, MYSQL_ASSOC);
        if (!$row) {
            return false;
        }
        $existing = $this->getExistingFieldValuesForKey(0, array('name' => $newName), array('user_id' => $overrideUserId ? $overrideUserId : (int)$row['user_id']));
        if ($existing) {
            throw new EExplainableError("Name already taken");
        }

        unset($row['id']);
        unset($row['created_at']);
        unset($row['oob_cutoff_time']);
        $row['name'] = $newName;
        if ($overrideUserId !== false) {
            $row['user_id'] = (int)$overrideUserId;
        }

        if (!$copyFields)  {
            // These values will show up in fields section as first, mandatory field. So we copy
            // default values in order to not confuse the user, because this branch happens if
            // user choose not to copy campaign fields
            $row['email_field_name'] = 'email';
            $row['email_field_description'] = 'Email Address';
        }

        return $row;
    }
    //--------------------------------------------------------------------------


    /**
     * @Cached
     */
    public function listCampaigsAssocPerUser() {
        $res = $this->db->query("SELECT * FROM `$this->tableName` ORDER BY `user_id`, `name`");
        $out = array();
        while (($row = mysql_fetch_assoc($res)) !== false) {
            $out[(int)$row['user_id']][] = $row;
        }
        mysql_free_result($res);
        return $out;
    }
    //--------------------------------------------------------------------------


    public function createShadowCampaignOf($sourceCampaign, $name, $ownerId) {
        if (is_array($sourceCampaign)) {
            $campaign = $sourceCampaign;
            Lib::removeIntKeys($campaign);
        } else {
            $campaign = $this->get((int)$sourceCampaign, MYSQL_ASSOC);
        }

        if (!$campaign) {
            throw new EServerError("Invalid source campaign");
        }

        $newCampaign = $campaign;

        unset($newCampaign['id']);
        unset($newCampaign['created_at']);
        unset($newCampaign['oob_cutoff_time']);

        $newCampaign['shadow_of']     = (int)$campaign['id'];
        $newCampaign['delivery_type'] = strval(self::DELIVERY_TYPE_QUEUED_KEY);
        $newCampaign['response_type'] = strval(self::RESPONSE_TYPE_API_KEY);
        $newCampaign['user_id']       = (int)$ownerId;
        $newCampaign['should_repost'] = '0';
        $newCampaign['repost_max']    = 0;
        $newCampaign['repost_hours']  = 0;
        $newCampaign['name']          = $name;

        $id = $this->insert($newCampaign);

        return $id;
    }
    //--------------------------------------------------------------------------


    /**
     * @Cached
     */
    public function listShadowsOfCampaign($campaignId, $onlyShadow = false, $onlySkim = false) {
        $sql = "SELECT `id`, `user_id`, `should_repost`, `repost_hours`, `repost_max`, `shadow_delay_hours`, `email_field_name`, `email_field_verify` FROM `$this->tableName`
        WHERE (`shadow_of` = ?) AND (`is_active` = '1') ";
        if ($onlyShadow) {
            $sql .= " AND (`skim_percentage` = 0)";
        } elseif ($onlySkim) {
            $sql .= " AND(`skim_percentage` <> 0)";
        }
        $sql .= " ORDER BY 1";
        return $this->db->getArray($sql, array((int)$campaignId));
    }
    //--------------------------------------------------------------------------


    public function deactivateShadowCampaigns($campaignId) {
        $sql = "UPDATE `$this->tableName` SET `is_active` = '0' WHERE `shadow_of` = ?";
        return $this->db->query($sql, array((int)$campaignId));
    }
    //--------------------------------------------------------------------------


    public function updateShadowCampaignsEmailFieldSettings($campaignId, $emailFieldName, $emailFieldDesc, $emailFieldMandatory = '0') {
        $sql = "UPDATE `$this->tableName` "
             . "SET "
                . "`email_field_name` = ?, "
                . "`email_field_description` = ?, "
                . "`email_field_mandatory` = ? "
             . "WHERE `shadow_of` = ?";
        return $this->db->query($sql, array($emailFieldName, $emailFieldDesc, $emailFieldMandatory, (int)$campaignId));
    }
    //--------------------------------------------------------------------------


    public function listCampaignsWithNoShadows(array $userIDs) {
        if (!$userIDs) {
            return array();
        }
        $campaignIDs = $this->db->getArray1v("SELECT `id` FROM `$this->tableName` WHERE `user_id` IN (" . self::implodeInts($userIDs) . ')');
        if (!$campaignIDs) {
            return array();
        }

        $sql = "SELECT DISTINCT `shadow_of` FROM `$this->tableName` WHERE `shadow_of` IN (" . self::implodeInts($campaignIDs) . ') ORDER BY 1';
        $haveShadows = $this->db->getArray1v($sql);
        $noShadow = array_diff($campaignIDs, $haveShadows);
        return array_values($noShadow);
    }
    //--------------------------------------------------------------------------

    
    public function listCampaignsWithIDs($ids) {
        if (empty($ids)) {
            return array();
        }
        
        $result = $this->db->getArray("SELECT * FROM `$this->tableName` WHERE `id` IN (" . self::implodeInts($ids) . ")");
        return $result;
    }
    //--------------------------------------------------------------------------
    

    public function listCampaignsWithShadows() {
        $sql = "SELECT `shadow_of`, COUNT(*) AS `cnt` FROM `$this->tableName` WHERE `shadow_of` IS NOT NULL
        GROUP BY `shadow_of`
        ORDER BY 1";

        return $this->db->getArrayAssoc($sql);
    }
    //--------------------------------------------------------------------------


    public function listCampaignsWithDropTrafficWarning() {
        $arr = $this->listAllWhere(array('stdw' => '1'), 'user_id');

        return $arr;
    }
    //--------------------------------------------------------------------------


    public function listAllCampaignIDs() {
        return $this->db->getArray1v("SELECT `id` FROM `$this->t_campaigns` ORDER BY 1");
    }
    //--------------------------------------------------------------------------


    public function deactivateCampaign($id) {
        $this->db->query("UPDATE `$this->tableName` SET `is_active` = '0' WHERE `id` = ?", array((int)$id));
    }
    //--------------------------------------------------------------------------


    public function reassignCampaignAndRename($campaign, $userId) {
        $name = $campaign['name'];
        while (!$this->db->query("UPDATE `$this->tableName` SET `user_id` = ?, `name` = ? WHERE `id` = ?", array((int)$userId, $name, (int)$campaign['id']))) {
            $name = $campaign['name'] . ' ' . rand(1000, 9999);
        }
        $campaign['name'] = $name;

        return $campaign;
    }
    //--------------------------------------------------------------------------


    public function getPartnerWrapperId($campaignId) {
        $sql = "SELECT `id` FROM `$this->t_partners` WHERE `wrapped_campaign_id` = ? LIMIT 1";

        $wrappedId = $this->db->getTopLeftInt($sql,array($campaignId));

        return $wrappedId;
    }
    //--------------------------------------------------------------------------
    
    
    public function hasDeliveryPartner($campaignId) {
        $sql = "SELECT `id`
                FROM `$this->t_campaign_delivery` d
                INNER JOIN `$this->t_partners` p
                    ON d.partner_id = p.id
                WHERE d.campaign_id = ? 
                LIMIT 1";

        $params = array($campaignId);
        $id = $this->db->getTopLeftInt($sql, $params);

        if (empty($id)) {
            return false;
        }
        return true;
    }
    //--------------------------------------------------------------------------
    
    
    public function checkCampaignIsQueuedDelivery($campaignId) {
        $sql = "SELECT `delivery_type` FROM `$this->t_campaigns` WHERE `id` = ? LIMIT 1";

        $deliveryType = $this->db->getTopLeftInt($sql,array($campaignId));

        return intval($deliveryType) === Model_Campaign::DELIVERY_TYPE_QUEUED_KEY;
    }
    //--------------------------------------------------------------------------
    
    public function checkCampaignIsActive($campaignId) {
        $sql = "SELECT `is_active` FROM `$this->t_campaigns` WHERE `id` = ? LIMIT 1";

        $isActive = $this->db->getTopLeftInt($sql,array($campaignId));

        if ($isActive) {
            return true;
        } else {
            return false;
        }
    }
    //--------------------------------------------------------------------------
    
    
    public function checkExistMasterCampaign($userId) {
        $sql = "SELECT `id` FROM `$this->t_campaigns` WHERE `user_id` = ? AND `is_master` = '1' LIMIT 1";

        $result = $this->db->getArray($sql,array($userId));

        if (!empty($result)) {
            return true;
        } else {
            return false;
        }
    }
    //--------------------------------------------------------------------------
    
    
    public function updateCampaignRoundRobinLastIndex($campaignId, $lastIndex) {
        $sql = "UPDATE `$this->tableName` SET `round_robin_last_index` = ? WHERE `id` = ?";
        return $this->db->query($sql, array($lastIndex, (int)$campaignId));
    }
    //--------------------------------------------------------------------------
    
    
    public function listDeliveryType() {
        return self::$deliveryTypes;
    }
    //--------------------------------------------------------------------------
    
    
    public function listResponseType() {
        return self::$responseTypes;
    }
    //--------------------------------------------------------------------------
    
    
    public function listCampaignType() {
        return self::$campaignTypes;
    }
    //--------------------------------------------------------------------------
    
    public function listDistributionType() {
        return self::$distributionTypes;
    }
    //--------------------------------------------------------------------------
    
    public function listBidResponseType() {
        return self::$bidResponseType;
    }
    //--------------------------------------------------------------------------
}
